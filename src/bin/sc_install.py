#!/usr/bin/env python3
#
# Copyright 2014-2024 Justin Ottley
#
# Licensed under the terms set forth in the LICENSE.txt file
#

import os
import sys
import argparse

def write_contents(dest_contents):

    print('')
    print(dest_contents)
    with open(dest_contents, 'w') as wfh:
        wfh.write('# Automatically generated by scaffold\n')

    print('Done')


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--itype', dest='itype', help='install type', required=True)
    parser.add_argument('--sset_rname', '-s', dest='sset_rname', help='software set name')
    parser.add_argument('--libname', dest='lib_name', help='product name', default='')
    parser.add_argument('--dest', dest='dest_contents', help='destination contents dir/file')
    parser.add_argument('src_files', nargs='*')

    args = parser.parse_args()

    if args.itype.startswith('direct'):

        src_path = args.src_files[0]
        dest_path = args.dest_contents

        print('{} -> {}'.format(src_path, dest_path))
        cmd = 'cp {} {}'.format(src_path, dest_path)

        if os.name == 'nt':
            src_path = src_path.replace('/', '\\')
            dest_path = dest_path.replace('/', '\\')

            cmd = 'copy {} {}'.format(src_path, dest_path)


        os.system(cmd)

        if args.itype == 'direct_exe':
            print('chmod +x: {}'.format(dest_path))

            if os.name == 'nt': # generate .bat wrapper
                bat_wrapper_path = dest_path.replace('.py', '.bat')
                bat_wrapper_contents = '@rem automatically generated by scninja\n\n'
                bat_wrapper_contents += '{} {} %*'.format(sys.executable, dest_path)
                with open(bat_wrapper_path, 'w') as wfh:
                    wfh.write(bat_wrapper_contents)

                print('Wrote {}'.format(bat_wrapper_path))

            os.chmod(dest_path, 0o777)


    elif args.itype == 'header':
        
        src_dir = os.path.dirname(args.src_files[0])
        dest_dir = os.path.dirname(args.dest_contents)
        # dest_contents = os.path.join(dest_dir, '.contents')

        if not os.path.isdir(dest_dir):
            print('Creating {}'.format(dest_dir))
            os.makedirs(dest_dir)


        for src in args.src_files:

            cmd = 'cp {} {}'.format(src, dest_dir)
            if os.name == 'nt':
                cmd = 'copy {} {}'.format(src.replace('/', '\\'), dest_dir.replace('/', '\\'))
            print(cmd)
            os.system(cmd)

        write_contents(args.dest_contents)



    elif args.itype == 'subdir':

        dest_dir = os.path.dirname(args.dest_contents)
        src_reldir = args.lib_name + os.path.sep
        for src_entry in args.src_files:
            src_rel = src_entry.replace(src_reldir, '')

            dest_path = os.path.join(dest_dir, src_rel)
            dest_parent_dir = os.path.dirname(dest_path)

            if not os.path.isdir(dest_parent_dir):
                print('Creating {}'.format(dest_parent_dir))
                os.makedirs(dest_parent_dir)

            cp_cmd = 'cp {} {}'.format(src_entry, dest_path)
            if os.name == 'nt':
                cp_cmd = 'copy {} {}'.format(src_entry.replace('/', '\\'), dest_path.replace('/', '\\'))

            print(cp_cmd)
            os.system(cp_cmd)


        write_contents(args.dest_contents)



if __name__ == '__main__':
    main()